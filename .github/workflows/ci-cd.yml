name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/*'
      - 'hotfix/*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

# Cancel previous runs when new one is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: haominhnguyen/badmintonight-bot
  # GitHub Actions kh√¥ng h·ªó tr·ª£ JS expression tr·ª±c ti·∫øp trong env
  # N√™n b·∫°n n√™n ƒë·∫∑t version th√¥ng qua step (s·∫Ω l√†m b√™n d∆∞·ªõi)
  PACKAGE_VERSION: '1.0.0'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests || github.event_name == 'push' || github.event_name == 'pull_request' }}
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: badminton_bot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/badminton_bot_test

      - name: Run tests
        run: npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/badminton_bot_test
          NODE_ENV: test

      - name: Run linting
        run: npm run lint

      - name: Run security audit
        run: npm audit --audit-level moderate

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && !inputs.skip_tests) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract package version
        id: version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
          echo "Package version: $PACKAGE_VERSION"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ env.PACKAGE_VERSION }},enable={{is_default_branch}}
            type=raw,value=${{ env.PACKAGE_VERSION }}-${{ github.sha }},enable={{is_default_branch}}
            type=raw,value=v${{ env.PACKAGE_VERSION }},enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.arm64
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-skip-tests:
    name: Build Docker Image (Skip Tests)
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.skip_tests }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract package version
        id: version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
          echo "Package version: $PACKAGE_VERSION"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ env.PACKAGE_VERSION }},enable={{is_default_branch}}
            type=raw,value=${{ env.PACKAGE_VERSION }}-${{ github.sha }},enable={{is_default_branch}}
            type=raw,value=v${{ env.PACKAGE_VERSION }},enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.arm64
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, build-skip-tests]
    if: ${{ always() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && (needs.build.result == 'success' || needs['build-skip-tests'].result == 'success') }}
    environment: production

    steps:
       - name: Checkout code
         uses: actions/checkout@v4

       - name: Deploy to production server
         uses: appleboy/ssh-action@v1.0.3
         with:
           host: ${{ secrets.PRODUCTION_HOST }}
           username: ${{ secrets.PRODUCTION_USERNAME }}
           password: ${{ secrets.PRODUCTION_PASSWORD }}
           script: |
             cd /opt/badminton-bot
             
             # Pull latest code
             git pull origin main
             
             # Use the fixed deployment script
             chmod +x deploy-fixed.sh
             ./deploy-fixed.sh

       - name: Update version metadata
         run: |
           node scripts/update-version.js ${{ github.sha }} $(date -u +"%Y-%m-%dT%H:%M:%SZ") ${{ github.sha }}

       - name: Health check production
         run: |
           sleep 30
           curl -f https://haominhnguyen.shop/health || echo "Health check failed, but continuing..."
           curl -f https://haominhnguyen.shop/api/v1/version || echo "Version API check failed, but continuing..."

       - name: Version check production
         run: |
           echo "üîç Checking version information..."
           sleep 10
           
           # Check version API
           VERSION_RESPONSE=$(curl -s https://haominhnguyen.shop/api/v1/version || echo "{}")
           echo "Version API Response: $VERSION_RESPONSE"
           
           # Extract version from response
           VERSION=$(echo $VERSION_RESPONSE | jq -r '.data.version // "unknown"')
           GIT_COMMIT=$(echo $VERSION_RESPONSE | jq -r '.data.gitCommit // "unknown"')
           BUILD_TIME=$(echo $VERSION_RESPONSE | jq -r '.data.buildTime // "unknown"')
           
           echo "üìä Version Information:"
           echo "  Version: $VERSION"
           echo "  Git Commit: $GIT_COMMIT"
           echo "  Build Time: $BUILD_TIME"
           
           # Verify deployment
           if [ "$GIT_COMMIT" = "${{ github.sha }}" ] || [ "$GIT_COMMIT" = "unknown" ]; then
             echo "‚úÖ Version check passed"
           else
             echo "‚ö†Ô∏è  Version check warning: Expected ${{ github.sha }}, got $GIT_COMMIT"
           fi

       - name: Notify deployment success
         if: success()
         uses: dawidd6/action-send-mail@v3
         continue-on-error: true
         with:
           server_address: smtp.gmail.com
           server_port: 587
           username: ${{ secrets.GMAIL_USERNAME }}
           password: ${{ secrets.GMAIL_APP_PASSWORD }}
           subject: "üöÄ Badminton Bot Deployment Success"
           to: haonmdotdev@gmail.com
           from: ${{ secrets.GMAIL_USERNAME }}
           body: |
             üöÄ Badminton Bot has been successfully deployed to production!
             
             üìä Deployment Details:
             - Branch: ${{ github.ref }}
             - Commit: ${{ github.sha }}
             - Author: ${{ github.actor }}
             - Time: ${{ github.event.head_commit.timestamp }}
             
             üîó Access Points:
             - Main App: https://haominhnguyen.shop
             - Admin Panel: https://haominhnguyen.shop/admin.html
             - API Docs: https://haominhnguyen.shop/api-docs
             - Version API: https://haominhnguyen.shop/api/v1/version
             
             ‚úÖ Version check completed successfully!

       - name: Notify deployment failure
         if: failure()
         uses: dawidd6/action-send-mail@v3
         continue-on-error: true
         with:
           server_address: smtp.gmail.com
           server_port: 587
           username: ${{ secrets.GMAIL_USERNAME }}
           password: ${{ secrets.GMAIL_APP_PASSWORD }}
           subject: "‚ùå Badminton Bot Deployment Failed"
           to: haonmdotdev@gmail.com
           from: ${{ secrets.GMAIL_USERNAME }}
           body: |
             Badminton Bot deployment has failed!
             
             Deployment Details:
             - Branch: ${{ github.ref }}
             - Commit: ${{ github.sha }}
             - Author: ${{ github.actor }}
             - Time: ${{ github.event.head_commit.timestamp }}
             
             üîç Check GitHub Actions logs:
             ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
             
             üìã Common fixes:
             - Check container status: docker ps
             - Check logs: docker logs badminton-bot-prod
             - Restart containers: docker-compose -f docker-compose.prod.yml restart
