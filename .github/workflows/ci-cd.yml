name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

# Cancel previous runs when new one is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: haominhnguyen/badmintonight-bot
  PACKAGE_VERSION: ${{ github.event.head_commit.message.match(/version: (.*)/)?.[1] || '1.0.0' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests || github.event_name == 'push' || github.event_name == 'pull_request' }}
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: badminton_bot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Run database migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/badminton_bot_test

    - name: Run tests
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/badminton_bot_test
        NODE_ENV: test

    - name: Run linting
      run: npm run lint

    - name: Run security audit
      run: npm audit --audit-level moderate

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && !inputs.skip_tests) }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract package version
      id: version
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
        echo "Package version: $PACKAGE_VERSION"

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ env.PACKAGE_VERSION }},enable={{is_default_branch}}
          type=raw,value=${{ env.PACKAGE_VERSION }}-${{ github.sha }},enable={{is_default_branch}}
          type=raw,value=v${{ env.PACKAGE_VERSION }},enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.arm64
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-skip-tests:
    name: Build Docker Image (Skip Tests)
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.skip_tests }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract package version
      id: version
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
        echo "Package version: $PACKAGE_VERSION"

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ env.PACKAGE_VERSION }},enable={{is_default_branch}}
          type=raw,value=${{ env.PACKAGE_VERSION }}-${{ github.sha }},enable={{is_default_branch}}
          type=raw,value=v${{ env.PACKAGE_VERSION }},enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.arm64
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max


  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, build-skip-tests]
    if: ${{ always() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && (needs.build.result == 'success' || needs['build-skip-tests'].result == 'success') }}
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        password: ${{ secrets.PRODUCTION_PASSWORD }}
        script: |
          cd /opt/badminton-bot
          
          # Pull latest code
          git pull origin main
          
          # Create necessary directories
          mkdir -p nginx logs/nginx
          
          # Copy nginx config if needed
          if [ ! -f "nginx/nginx.conf" ] && [ -f "nginx.conf" ]; then
            cp nginx.conf nginx/nginx.conf
          fi
          
          # Make scripts executable
          chmod +x *.sh
          chmod +x scripts/*.sh
          
          # Stop existing containers
          docker-compose -f docker-compose.prod.yml down || true
          
          # Remove old nginx container
          docker rm -f badminton-nginx || true
          
          # Start services with production configuration
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to start
          sleep 30
          
          # Run database migrations
          docker exec badminton-bot-prod npx prisma migrate deploy || echo "Migration failed, but continuing..."
          
          # Test API endpoints
          echo "Testing API endpoints..."
          curl -f http://localhost:3100/health || echo "App health check failed"
          curl -f http://localhost/api/v1/version || echo "API version check failed"
          curl -f http://localhost/api-docs || echo "API docs check failed"
          
          # Show container status
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

    # - name: Create backup after deployment
    #   uses: appleboy/ssh-action@v1.0.3
    #   with:
    #     host: ${{ secrets.PRODUCTION_HOST }}
    #     username: ${{ secrets.PRODUCTION_USERNAME }}
    #     password: ${{ secrets.PRODUCTION_PASSWORD }}
    #     script: |
    #       cd /opt/badminton-bot
    #       sudo chmod +x backup-restore.sh
    #       sudo ./backup-restore.sh backup

    - name: Update version metadata
      run: |
        node scripts/update-version.js ${{ github.sha }} $(date -u +"%Y-%m-%dT%H:%M:%SZ") ${{ github.sha }}

    - name: Health check production
      run: |
        sleep 30
        curl -f https://haominhnguyen.shop/health || echo "Health check failed, but continuing..."
        curl -f https://haominhnguyen.shop/api/v1/version || echo "Version API check failed, but continuing..."

    - name: Version check production
      run: |
        echo "üîç Checking version information..."
        sleep 10
        
        # Check version API
        VERSION_RESPONSE=$(curl -s https://haominhnguyen.shop/api/v1/version || echo "{}")
        echo "Version API Response: $VERSION_RESPONSE"
        
        # Extract version from response
        VERSION=$(echo $VERSION_RESPONSE | jq -r '.data.version // "unknown"')
        GIT_COMMIT=$(echo $VERSION_RESPONSE | jq -r '.data.gitCommit // "unknown"')
        BUILD_TIME=$(echo $VERSION_RESPONSE | jq -r '.data.buildTime // "unknown"')
        
        echo "üìä Version Information:"
        echo "  Version: $VERSION"
        echo "  Git Commit: $GIT_COMMIT"
        echo "  Build Time: $BUILD_TIME"
        
        # Verify deployment
        if [ "$GIT_COMMIT" = "${{ github.sha }}" ] || [ "$GIT_COMMIT" = "unknown" ]; then
          echo "‚úÖ Version check passed"
        else
          echo "‚ö†Ô∏è  Version check warning: Expected ${{ github.sha }}, got $GIT_COMMIT"
        fi

    - name: Notify deployment success
      if: success()
      uses: dawidd6/action-send-mail@v3
      continue-on-error: true
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.GMAIL_USERNAME }}
        password: ${{ secrets.GMAIL_APP_PASSWORD }}
        subject: "üöÄ Badminton Bot Deployment Success"
        to: haonmdotdev@gmail.com
        from: ${{ secrets.GMAIL_USERNAME }}
        body: |
          üöÄ Badminton Bot has been successfully deployed to production!
          
          üìä Deployment Details:
          - Branch: ${{ github.ref }}
          - Commit: ${{ github.sha }}
          - Author: ${{ github.actor }}
          - Time: ${{ github.event.head_commit.timestamp }}
          
          üîó Access Points:
          - Main App: https://haominhnguyen.shop
          - Admin Panel: https://haominhnguyen.shop/admin.html
          - API Docs: https://haominhnguyen.shop/api-docs
          - Version API: https://haominhnguyen.shop/api/v1/version
          
          ‚úÖ Version check completed successfully!

    - name: Notify deployment failure
      if: failure()
      uses: dawidd6/action-send-mail@v3
      continue-on-error: true
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.GMAIL_USERNAME }}
        password: ${{ secrets.GMAIL_APP_PASSWORD }}
        subject: "‚ùå Badminton Bot Deployment Failed"
        to: haonmdotdev@gmail.com
        from: ${{ secrets.GMAIL_USERNAME }}
        body: |
          Badminton Bot deployment has failed!
          
          Deployment Details:
          - Branch: ${{ github.ref }}
          - Commit: ${{ github.sha }}
          - Author: ${{ github.actor }}
          - Time: ${{ github.event.head_commit.timestamp }}
          
          üîç Check GitHub Actions logs:
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          üìã Common fixes:
          - Check container status: sudo docker ps
          - Check logs: sudo docker logs badminton-bot-prod
          - Restart containers: sudo docker-compose -f docker-compose.prod.yml restart

  # rollback:
  #   name: Rollback
  #   runs-on: ubuntu-latest
  #   if: failure() && github.ref == 'refs/heads/main'
  #   environment: production

  #   steps:
  #   - name: Rollback to previous version
  #     uses: appleboy/ssh-action@v1.0.3
  #     with:
  #       host: ${{ secrets.PRODUCTION_HOST }}
  #       username: ${{ secrets.PRODUCTION_USERNAME }}
  #       password: ${{ secrets.PRODUCTION_PASSWORD }}
  #       script: |
  #         cd /opt/badminton-bot
  #         sudo chmod +x manage.sh
  #         sudo ./manage.sh rollback

  #   - name: Notify rollback
  #     uses: dawidd6/action-send-mail@v3
  #     continue-on-error: true
  #     with:
  #       server_address: smtp.gmail.com
  #       server_port: 587
  #       username: ${{ secrets.GMAIL_USERNAME }}
  #       password: ${{ secrets.GMAIL_APP_PASSWORD }}
  #       subject: "‚ö†Ô∏è Badminton Bot Rollback Executed"
  #       to: haonmdotdev@gmail.com
  #       from: ${{ secrets.GMAIL_USERNAME }}
  #       body: |
  #         Badminton Bot has been rolled back to the previous version due to deployment failure.
          
  #         Rollback Details:
  #         - Branch: ${{ github.ref }}
  #         - Commit: ${{ github.sha }}
  #         - Author: ${{ github.actor }}
  #         - Time: ${{ github.event.head_commit.timestamp }}
          
  #         üîç Check GitHub Actions logs:
  #         ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
  #         The application has been restored to the last working version.