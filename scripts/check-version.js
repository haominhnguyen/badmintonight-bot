#!/usr/bin/env node

/**
 * Script to check version information from the API
 * Usage: node scripts/check-version.js [url]
 */

const https = require('https');
const http = require('http');

const API_URL = process.argv[2] || 'https://haominhnguyen.shop/api/v1/version';

function makeRequest(url) {
  return new Promise((resolve, reject) => {
    const client = url.startsWith('https') ? https : http;
    
    client.get(url, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve(jsonData);
        } catch (error) {
          reject(new Error('Invalid JSON response'));
        }
      });
    }).on('error', (error) => {
      reject(error);
    });
  });
}

async function checkVersion() {
  console.log('üîç Checking version information...');
  console.log(`üì° API URL: ${API_URL}`);
  console.log('');
  
  try {
    const response = await makeRequest(API_URL);
    
    if (response.success) {
      const data = response.data;
      
      console.log('‚úÖ Version check successful!');
      console.log('');
      console.log('üìä Version Information:');
      console.log(`  üè∑Ô∏è  Version: ${data.version}`);
      console.log(`  üèóÔ∏è  Build Time: ${data.buildTime}`);
      console.log(`  üìù Git Commit: ${data.gitCommit}`);
      console.log(`  üåø Git Branch: ${data.gitBranch}`);
      console.log(`  üü¢ Node Version: ${data.nodeVersion}`);
      console.log(`  üåç Environment: ${data.environment}`);
      console.log(`  ‚è±Ô∏è  Uptime: ${data.uptime}`);
      console.log(`  üöÄ Last Deploy: ${data.lastDeploy}`);
      console.log(`  üìÖ Timestamp: ${data.timestamp}`);
      console.log('');
      console.log('üéØ Features:');
      data.features.forEach(feature => {
        console.log(`  ‚Ä¢ ${feature}`);
      });
      console.log('');
      console.log(`üîó Status: ${data.status}`);
      
    } else {
      console.log('‚ùå Version check failed!');
      console.log(`Error: ${response.error || response.message}`);
    }
    
  } catch (error) {
    console.log('‚ùå Version check failed!');
    console.log(`Error: ${error.message}`);
    console.log('');
    console.log('üîß Troubleshooting:');
    console.log('  ‚Ä¢ Check if the server is running');
    console.log('  ‚Ä¢ Verify the API URL is correct');
    console.log('  ‚Ä¢ Check network connectivity');
    console.log('  ‚Ä¢ Ensure the version API endpoint is accessible');
  }
}

// Run the check
checkVersion();
